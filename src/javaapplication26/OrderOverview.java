/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package deliveryvendor;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class OrderOverview extends javax.swing.JPanel {
private VendorRunner user;

    /**
     * Creates new form OrderOverview
     */
    String filePath = "resources/order.txt";
    String filePath2 = "resources/Users.txt";
    int[] displayColumnIndices = {0,1,2,3,4,5,6,7,8};
    
    String OrderID;
    String CustomerID;
    public OrderOverview(VendorRunner user) {
        initComponents();
        this.user = user;
        VendorMain obj1 = new VendorMain(user);
        VendorOrderClass obj2 = new VendorOrderClass();
        try {
            obj2.loadPendingTableData(filePath, displayColumnIndices,(DefaultTableModel) OrderPendingTable.getModel(),user.getId());
            obj2.loadOrderTableData(filePath, displayColumnIndices,(DefaultTableModel) OrderTable.getModel(),user.getId());
        } catch (IOException ex) {
            Logger.getLogger(OrderOverview.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        OrderPendingTable = new javax.swing.JTable();
        lblTitle = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        OrderTable = new javax.swing.JTable();

        OrderPendingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        OrderPendingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                OrderPendingTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(OrderPendingTable);

        lblTitle.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblTitle.setText("Order Overview");

        OrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        OrderTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                OrderTableMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(OrderTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void OrderPendingTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OrderPendingTableMouseReleased
        // TODO add your handling code here:
        int row = OrderPendingTable.getSelectedRow();
        VendorMain obj1 = new VendorMain(user);
        VendorOrderClass obj2 = new VendorOrderClass();
        int result = JOptionPane.showConfirmDialog(
                this,
                "Do you want to accept this order?",
                "OrderAssign",
                JOptionPane.YES_NO_OPTION);        
        
        if (result == JOptionPane.YES_OPTION){
            JOptionPane.showMessageDialog(this, "Order Accepted!");
            DefaultTableModel modelP = (DefaultTableModel)OrderPendingTable.getModel();
            DefaultTableModel modelO = (DefaultTableModel)OrderTable.getModel();
                
            OrderID = String.valueOf(modelP.getValueAt(row,0));
            
            //Order obj2 = new Order(OrderID);         
            //System.out.println("1");
            try {
                String [] lines = obj2.readLines(filePath);
                obj2.modifyStatus(lines,OrderID,"preparing",this);
                obj2.writeLinesToFile(filePath, lines);
                
                System.out.println("Modification successful.");
                modelP.setRowCount(0);
                modelP.setColumnCount(0);
                modelO.setRowCount(0);
                modelO.setColumnCount(0);
                
                
            } catch (IOException ex) {
                java.util.logging.Logger.getLogger(OrderOverview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
                try {
                    obj2.loadPendingTableData(filePath, displayColumnIndices,(DefaultTableModel) OrderPendingTable.getModel(),user.getId());
                    obj2.loadOrderTableData(filePath, displayColumnIndices,(DefaultTableModel) OrderTable.getModel(),user.getId());
                } catch (IOException ex) {
                    java.util.logging.Logger.getLogger(OrderOverview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
            
            
            
        } else if(result == JOptionPane.NO_OPTION){
            
            JOptionPane.showMessageDialog(this,"order declined!");
            DefaultTableModel modelP = (DefaultTableModel)OrderPendingTable.getModel();
            DefaultTableModel modelO = (DefaultTableModel)OrderTable.getModel();
                
            OrderID = String.valueOf(modelP.getValueAt(row,0));
            CustomerID = String.valueOf(modelP.getValueAt(row,7));
            Double price = Double.valueOf(String.valueOf(modelP.getValueAt(row,4)));
            //System.out.println("1");
            try {
                String [] lines = obj2.readLines(filePath);
                obj2.modifyStatus(lines,OrderID,"canceled",this);
                obj2.writeLinesToFile(filePath, lines);                
                
                String [] lines2 = obj2.readLines(filePath2);
                obj2.Refund(lines2,CustomerID,price,this);
                obj2.writeLinesToFile(filePath2, lines2);
                
                System.out.println("Modification successful.");
                modelP.setRowCount(0);
                modelP.setColumnCount(0);
                modelO.setRowCount(0);
                modelO.setColumnCount(0);
                
                
            } catch (IOException ex) {
                java.util.logging.Logger.getLogger(OrderOverview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
                try {
                    obj2.loadPendingTableData(filePath, displayColumnIndices,(DefaultTableModel) OrderPendingTable.getModel(),user.getId());
                    obj2.loadOrderTableData(filePath, displayColumnIndices,(DefaultTableModel) OrderTable.getModel(),user.getId());
                } catch (IOException ex) {
                    java.util.logging.Logger.getLogger(OrderOverview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
            
            
        }
        else {            
            
        }
        
    }//GEN-LAST:event_OrderPendingTableMouseReleased

    private void OrderTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OrderTableMouseReleased
        // TODO add your handling code here:
        int row = OrderTable.getSelectedRow();
        VendorMain obj1 = new VendorMain(user);
        VendorOrderClass obj2 = new VendorOrderClass();
        int result = JOptionPane.showConfirmDialog(
                this,
                "Is the order ready to serve?",
                "OrderStatusAssign",
                JOptionPane.YES_NO_OPTION);  
        
        
        if (result == JOptionPane.YES_OPTION){           
            
            DefaultTableModel model = (DefaultTableModel)OrderTable.getModel();
                
            OrderID = String.valueOf(model.getValueAt(row,0));
            //Order obj2 = new Order(OrderID);         
            //System.out.println("1");
            try {
                String [] lines = obj2.readLines(filePath);
                obj2.modifyStatus(lines,OrderID,"ready",this);
                obj2.writeLinesToFile(filePath, lines);                
                System.out.println("Modification successful.");                
                model.setRowCount(0);
                model.setColumnCount(0);
                
                
            } catch (IOException ex) {
                java.util.logging.Logger.getLogger(OrderOverview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
                try {
                    
                    obj2.loadOrderTableData(filePath, displayColumnIndices,(DefaultTableModel) OrderTable.getModel(),user.getId());
                } catch (IOException ex) {
                    java.util.logging.Logger.getLogger(OrderOverview.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }          
        } 
        else {            
            
        }
        
    }//GEN-LAST:event_OrderTableMouseReleased

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable OrderPendingTable;
    private javax.swing.JTable OrderTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTitle;
    // End of variables declaration//GEN-END:variables
}
