/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package deliveryvendor;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

/**
 *
 * @author User
 */
public class CustomerOrder extends javax.swing.JPanel {

    /**
     * Creates new form CustomerOrder
     */
    Customer_1 user = new Customer_1();
    String filePath1 = "resources/food1.txt";
    String filePath2 = "resources/order.txt";
    String filePath3 = "resources/Users.txt";
    String LoginID;
    int[] displayColumnIndices = {0,1,2,3,4,5};
    public CustomerOrder(Customer_1 user) {
        initComponents();
        //CustomerMain obj1 = new CustomerMain(user);
        //System.out.println(obj1.LoginID);
        
        this.user = user;
        CustomerOrderClass obj2 = new CustomerOrderClass();
        
        try {
            lblCredit.setText(Double.toString(user.getAmount()));
            System.out.println(user.getAmount());
            System.out.println(user.getId());
            String lastID = obj2.determineLastID(filePath2);
            String nextID = obj2.incrementID(lastID);
            lblOrderID.setText("O"+nextID);
            obj2.loadTableData(filePath1, displayColumnIndices, (DefaultTableModel) FoodTable.getModel());
        } catch (IOException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        FoodTable = new javax.swing.JTable();
        lblTitle = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblCreditT = new javax.swing.JLabel();
        lblCredit = new javax.swing.JLabel();
        lblFoodName = new javax.swing.JLabel();
        lblFoodPrice = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblRestaurant = new javax.swing.JLabel();
        comboType = new javax.swing.JComboBox<>();
        btnOrder = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        lblOrderID = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        FoodTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        FoodTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                FoodTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(FoodTable);

        lblTitle.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblTitle.setText("Food Menu");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Food Name:");

        lblCreditT.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblCreditT.setText("Credit:");

        lblCredit.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblCredit.setText("0.0");

        lblFoodName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblFoodName.setText("none chosen");

        lblFoodPrice.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblFoodPrice.setText("none chosen");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("Food Price:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Quantity:");

        txtQuantity.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setText("Type:");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setText("Restaurant:");

        lblRestaurant.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblRestaurant.setText("none chosen");

        comboType.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        comboType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "pickup", "dinein", "delivery" }));

        btnOrder.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnOrder.setText("Order");
        btnOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        lblOrderID.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblOrderID.setText("O00");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel12.setText("Order ID:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitle)
                        .addGap(283, 283, 283)
                        .addComponent(lblCreditT)
                        .addGap(18, 18, 18)
                        .addComponent(lblCredit))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblFoodName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblFoodPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 16, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCredit)
                    .addComponent(lblCreditT)
                    .addComponent(lblTitle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(lblOrderID))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(lblFoodName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFoodPrice)
                            .addComponent(jLabel7)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnOrder)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnClear))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9)
                                .addComponent(lblRestaurant))
                            .addGap(46, 46, 46)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(comboType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(39, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void FoodTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FoodTableMouseReleased
        // TODO add your handling code here:
        int row = FoodTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)FoodTable.getModel();
        String FoodName = String.valueOf(model.getValueAt(row,1));
        String Price = String.valueOf(model.getValueAt(row,2));
        String Restaurant = String.valueOf(model.getValueAt(row,5));
        
        lblFoodName.setText(FoodName);
        lblFoodPrice.setText(Price);
        lblRestaurant.setText(Restaurant);
    }//GEN-LAST:event_FoodTableMouseReleased

    private void btnOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderActionPerformed
        // TODO add your handling code here:
       // Customer_1 user = new Customer_1();
       Customer_1 c = new Customer_1();
        CustomerMain obj1 = new CustomerMain(user);
        CustomerOrderClass obj2 = new CustomerOrderClass();
        DefaultTableModel model = (DefaultTableModel)FoodTable.getModel();
        int row = FoodTable.getSelectedRow();        
        LocalDate currentDate = LocalDate.now();
        // Format the date (optional)
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String formattedDate = currentDate.format(formatter);
        String Date = formattedDate;
        String SQuantity = txtQuantity.getText();
        String Destination = "none";
        String FoodName = lblFoodName.getText();
        boolean StopAction = false;
        if (( SQuantity.isEmpty())||FoodName.equals("none chosen")) {
            JOptionPane.showMessageDialog(null, "Please choose a food in the table and fill up all fieds.");
            
        }else{
            String OrderID = lblOrderID.getText();
            int Quantity = Integer.parseInt(SQuantity);
            String FoodPrice = lblFoodPrice.getText();
            Double PricePaid = Double.valueOf(FoodPrice)* Double.valueOf(Quantity);
            String Vendor = String.valueOf(model.getValueAt(row,3));
            String VendorID = String.valueOf(model.getValueAt(row,4));
            String CustomerID = obj1.LoginID;
            System.out.println(user.getId());
            System.out.println(obj1.LoginID);
            String Status = "pending";
            String Type = (String) comboType.getSelectedItem();
            if(Type.equals("delivery")){
                Type = "delivery unassigned";
                PricePaid = PricePaid + 5.00;
                String userInput = JOptionPane.showInputDialog("Please write yout destination:");
                if (userInput != null) {
                    // User clicked OK
                    Destination = userInput;
                    
                    //JOptionPane.showMessageDialog(this, "Thank you for your review.");
                } else {
                    // User clicked Cancel or closed the dialog
                    StopAction = true;
                    JOptionPane.showMessageDialog(this, "Destination not given.");
                    
                }                
            }else{
            
            }            
            String DmID = "none";
            String Restaurant = lblRestaurant.getText();
            String Review = "none";
            if(!StopAction){
                try {
                    int result = JOptionPane.showConfirmDialog(
                    this,
                    "Total amount charged is RM"+PricePaid+". Do you want to pay for the order?",
                    "TaskAssign",
                    JOptionPane.YES_NO_OPTION);
                    if(result == JOptionPane.YES_OPTION){
                        double credit = Double.parseDouble(lblCredit.getText());
                        if(credit>=PricePaid){
                            String [] lines;
                            lines = obj2.readLines(filePath3);
                            obj2.Payment(lines,obj1.LoginID,this,PricePaid);
                            obj2.writeLinesToFile(filePath3, lines);                        
                        
                            String newRowData;
                            newRowData = obj2.writeNewRow(OrderID,Date,FoodName,Quantity,String.format("%.2f",PricePaid),Vendor,VendorID,CustomerID,Status,Type,Destination,DmID,Restaurant,Review);
                            obj2.addRowWithIncrementedIDToFile(filePath2, newRowData);
                            obj2.Initialize(filePath2,lblOrderID,lblFoodName,lblFoodPrice,lblRestaurant,txtQuantity,comboType);
                            System.out.println(obj2.ReadAmount(filePath3,CustomerID));
                            lblCredit.setText(obj2.ReadAmount(filePath3,CustomerID));
                        }else{
                            JOptionPane.showMessageDialog(null, "Insufficient credit balance, please top up your credit.");
                        }
                    }else{
                    
                    }                
                } catch (IOException ex) {
                    Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                JOptionPane.showMessageDialog(null, "Please fill up the destination if you choosed delivery.");
            }
            
        }
    }//GEN-LAST:event_btnOrderActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtQuantity.setText("");
        comboType.setSelectedIndex(0);
    }//GEN-LAST:event_btnClearActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable FoodTable;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnOrder;
    private javax.swing.JComboBox<String> comboType;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCredit;
    private javax.swing.JLabel lblCreditT;
    private javax.swing.JLabel lblFoodName;
    private javax.swing.JLabel lblFoodPrice;
    private javax.swing.JLabel lblOrderID;
    private javax.swing.JLabel lblRestaurant;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
